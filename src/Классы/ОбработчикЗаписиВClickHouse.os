
Перем Клик_Сервер;            // Строка                - адрес сервера http-сервиса Clickhouse
Перем Клик_Порт;              // Число                 - порт сервера http-сервиса Clickhouse
Перем Клик_Путь;              // Строка                - относительный путь к REST API Clickhouse
Перем Клик_Пользователь;      // Строка                - имя пользователя сервиса Clickhouse
Перем Клик_Пароль;            // Строка                - пароль пользователя сервиса Clickhouse
Перем Клик_ИмяБазы;           // Строка                - имя базы для помещения данных
Перем Клик_ИмяТаблицы;        // Строка                - имя таблицы для помещения данных

Перем Клик_Соединение;            // - HTTPСоединение - соединение с сервером ClickHouse

Перем Лог;                        // - Объект         - объект записи лога приложения

Функция Записать(Дамп, Знач Путь) Экспорт

	ПозицияРазделителя = СтрНайти(Путь, "://");
	Если ПозицияРазделителя > 0 Тогда
		Протокол = Лев(Путь, ПозицияРазделителя);
		Путь = Сред(Путь, ПозицияРазделителя + 3);
	Иначе
		Протокол = "http";
	КонецЕсли;
	ЧастиАдреса = СтрРазделить(Путь, "/");

	Клик_Путь = "";
	Если ЧастиАдреса.Количество() > 2 Тогда
		Для й = 1 По ЧастиАдреса.ВГраница() - 1 Цикл
			Клик_Путь = Клик_Путь + ?(Клик_Путь = "", "", "/") +ЧастиАдреса[й];
		КонецЦикла;
	КонецЕсли;

	ПозицияРазделителя = СтрНайти(ЧастиАдреса[0], ":");
	Если ПозицияРазделителя > 0 Тогда
		Клик_Сервер = СтрШаблон("%1://%2", Протокол, Лев(ЧастиАдреса[0], ПозицияРазделителя - 1));
		Клик_Порт = Сред(ЧастиАдреса[0], ПозицияРазделителя + 1);
	Иначе
		Клик_Сервер = СтрШаблон("%1://%2", Протокол, ЧастиАдреса[0]);
		Клик_Порт = "8123";
	КонецЕсли;

	Клик_Пользователь = "default";
	Клик_Пароль = "";

	Клик_ИмяБазы = ЧастиАдреса[ЧастиАдреса.ВГраница()];

	Соединение = ПолучитьСоединение();
	
	ОбрабатываемыеОбъекты = ОбщегоНазначения.ОбрабатываемыеОбъектыКластера();

	ВсегоОбработано = 0;

	НачалоОбработкиПорции = ТекущаяУниверсальнаяДатаВМиллисекундах();

	ВремяЗапроса = Дамп["endDate"];
	МеткаЗапроса = Дамп["endTimemark"];

	ОбрабатываемыеОбъекты = Новый Массив();
	ОбрабатываемыеОбъекты.Добавить("connection");
	
	Для Каждого ТекОбъект Из ОбрабатываемыеОбъекты Цикл

		Клик_ИмяТаблицы = ТекОбъект;
		
		АдресТаблицы = СтрШаблон("%1/%2",
		                         Путь,
		                         Клик_ИмяТаблицы);

		ДанныеДляОтправки = Дамп[ТекОбъект];

		ТекстОшибки = "";
		
		Если НЕ СоздатьТаблицу(Соединение, Клик_Путь, Клик_ИмяТаблицы, Клик_ИмяБазы, ТекстОшибки) Тогда
			Лог.Ошибка("[%1] Ошибка создания таблицы ""%2"":%3%4", ТипЗнч(ЭтотОбъект), АдресТаблицы, Символы.ПС, ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;

		Лог.Отладка("[%1] Отправка пакета данных (%2) в ""%3"".",
		            ТипЗнч(ЭтотОбъект),
		            ДанныеДляОтправки.data.Количество(),
		            АдресТаблицы);

		КоэффициентВремени = 1000;
		ВремяОжиданияДанных = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоОбработкиПорции) / КоэффициентВремени;
		НачалоОбработкиПорции = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		ДанныеОтвета = "";
		ТекстОшибки = "";
		
		ОписаниеПолей = ОписаниеПолей(ТекОбъект);

		СтрокиДляОтправки = ПолучитьСтрокиДляОтправки(ДанныеДляОтправки, ОписаниеПолей);
		
		ТелоЗапроса = СтрШаблон("INSERT INTO %1%2 VALUES %3",
		                        ?(ЗначениеЗаполнено(Клик_ИмяБазы), Клик_ИмяБазы + ".", ""),
		                        ТекОбъект,
		                        СтрокиДляОтправки);

		РезультатОбработки = ПолучитьРезультатОбработкиХТТПСервиса(Соединение,
		                                                           Клик_Путь,
		                                                           ТелоЗапроса,
		                                                           ДанныеОтвета,
		                                                           ТекстОшибки);
		
		ВремяОтправки = (ТекущаяУниверсальнаяДатаВМиллисекундах() - НачалоОбработкиПорции) / КоэффициентВремени;

		РезультатыОбработки = Новый Структура();
		РезультатыОбработки.Вставить("Обработано"         , РезультатОбработки);
		РезультатыОбработки.Вставить("Размер"             , ДанныеДляОтправки.Количество());
		РезультатыОбработки.Вставить("ВремяОжиданияДанных", ВремяОжиданияДанных);
		РезультатыОбработки.Вставить("ВремяОтправки"      , ВремяОтправки);
		РезультатыОбработки.Вставить("Ответ"              , ДанныеОтвета);
		РезультатыОбработки.Вставить("ТекстОшибки"        , ТекстОшибки);

		Если РезультатОбработки Тогда
			Лог.Отладка("[%1] Отправлен пакет данных (%2) в ""%3"". Время отправки: %4 сек.",
			            ТипЗнч(ЭтотОбъект),
			            ДанныеДляОтправки.Количество(),
			            АдресТаблицы,
			            РезультатыОбработки.ВремяОтправки);
		Иначе
			БылиОшибкиОтправки = Истина;
			Лог.Ошибка("[%1] Ошибка отправки пакет данных (%2) в ""%3"":%4%5%4Время отправки: %6 сек.",
			           ТипЗнч(ЭтотОбъект),
			           ДанныеДляОтправки.Количество(),
			           АдресТаблицы,
			           Символы.ПС,
			           ТекстОшибки,
			           РезультатыОбработки.ВремяОтправки);
		КонецЕсли;

		ВсегоОбработано = ВсегоОбработано + ДанныеДляОтправки.Количество();

	КонецЦикла;

	Возврат Истина;

КонецФункции // Записать()

// Функция - создает базу Clickhouse если она не существует
// 
// Параметры:
//     Соединение           - HTTPСоединение      - соединение с сервером Clickhouse
//     ИмяБазы              - Строка              - имя создаваемой базы Clickhouse
//
// Возвращаемое значение:
//   Булево                         - Истина - база создана/существует;
//                                    Ложь - в противном случае 
//
Функция СоздатьБазу(Соединение, СтрокаЗапроса, ИмяБазы, ТекстОшибки = "")

	ТелоЗапроса   = СтрШаблон("CREATE DATABASE IF NOT EXISTS %1", ИмяБазы);
	Ответ         = Неопределено;
	ТекстОшибки   = "";

	Результат = ПолучитьРезультатОбработкиХТТПСервиса(Соединение, СтрокаЗапроса, ТелоЗапроса, Ответ, ТекстОшибки);

	Возврат Результат;

КонецФункции // СоздатьБазу()

// Функция - создает таблицу в базе Clickhouse если она не существует
// 
// Параметры:
//     Соединение           - HTTPСоединение      - соединение с сервером Clickhouse
//     ИмяТаблицы           - Строка              - имя создаваемой таблицы Clickhouse
//     ИмяБазы              - Строка              - имя создаваемой базы Clickhouse
//
// Возвращаемое значение:
//   Булево                         - Истина - база создана/существует;
//                                    Ложь - в противном случае 
//
Функция СоздатьТаблицу(Соединение, СтрокаЗапроса, Знач ИмяТаблицы, Знач ИмяБазы = "", ТекстОшибки = "")

	Если ЗначениеЗаполнено(ИмяБазы) Тогда
		Если НЕ СоздатьБазу(Соединение, СтрокаЗапроса, ИмяБазы, ТекстОшибки) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	ОписаниеПолей = ОписаниеПолей(ИмяТаблицы);

	ПоляТаблицы = Новый Массив();
	ПоляТаблицы.Добавить("""recordDate"" DateTime('UTC') Codec(Delta, LZ4)");
	ПоляТаблицы.Добавить("""recordTimemark"" Int64 Codec(DoubleDelta, LZ4)");
	Для Каждого ТекПоле Из ОписаниеПолей Цикл
		ПоляТаблицы.Добавить(СтрШаблон("""%1"" %2", ТекПоле.Имя, ТекПоле.ТипClickHouse));
	КонецЦикла;

	УпорядочитьПо = УпорядочитьПо(ИмяТаблицы);
	Если ЗначениеЗаполнено(УпорядочитьПо) Тогда
		ВыражениеУпорядочивания = СтрШаблон("ORDER BY (%1)", УпорядочитьПо);
	КонецЕсли;

	ПервичныйКлюч = ПервичныйКлюч(ИмяТаблицы);
	Если ЗначениеЗаполнено(ПервичныйКлюч) Тогда
		ПервичныйКлюч = СтрШаблон("PRIMARY KEY (%1)", ПервичныйКлюч);
	КонецЕсли;

	Разделение = Разделение(ИмяТаблицы);
	Если ЗначениеЗаполнено(Разделение) Тогда
		Разделение = СтрШаблон("PARTITION BY (%1)",  Разделение);
	КонецЕсли;

	Если ЗначениеЗаполнено(ИмяБазы) Тогда
		ИмяТаблицы = СтрШаблон("%1.%2", ИмяБазы, ИмяТаблицы);
	КонецЕсли;

	ТелоЗапроса   = СтрШаблон("CREATE TABLE IF NOT EXISTS %1 (%2) ENGINE = MergeTree() %3 %4 %5 SETTINGS index_granularity = 8192;",
	                          ИмяТаблицы,
	                          СтрСоединить(ПоляТаблицы, ","),
	                          ПервичныйКлюч,
	                          Разделение,
	                          ВыражениеУпорядочивания);
	
	Ответ         = Неопределено;
	ТекстОшибки   = "";

	Результат = ПолучитьРезультатОбработкиХТТПСервиса(Соединение, СтрокаЗапроса, ТелоЗапроса, Ответ, ТекстОшибки);

	Возврат Результат;

КонецФункции // СоздатьТаблицу()

Функция ОписаниеПолей(ИмяТипаОбъекта)

	ПоляОбъекта = ТипыОбъектовКластера.СвойстваОбъекта(ИмяТипаОбъекта);

	ОписаниеПолей = Новый Массив();

	Для Каждого ТекПоле Из ПоляОбъекта Цикл
		Тип1С = ВРег(ТекПоле.Тип);
		ТипПоля = "LowCardinality(String)";
		Если Тип1С = "ЧИСЛО" Тогда
			ТипПоля = "Int64 Codec(DoubleDelta, LZ4)";
		ИначеЕсли Тип1С = "ДАТА" Тогда
			ТипПоля = "DateTime('UTC') Codec(Delta, LZ4)";
		ИначеЕсли Тип1С = "БУЛЕВО" Тогда
			ТипПоля = "UInt8 Codec(DoubleDelta, LZ4)";
		КонецЕсли;
		ОписаниеПолей.Добавить(Новый Структура("Имя, Тип1С, ТипClickHouse", ТекПоле.ИмяРАК, Тип1С, ТипПоля));
	КонецЦикла;

	Возврат ОписаниеПолей;

КонецФункции // ОписаниеПолей()

Функция ПервичныйКлюч(ИмяТаблицы)

	Результат = "";

	Если НРег(ИмяТаблицы) = Перечисления.РежимыАдминистрирования.Кластеры Тогда
		Результат = "cluster";
	ИначеЕсли НРег(ИмяТаблицы) = Перечисления.РежимыАдминистрирования.Серверы Тогда
		Результат = "server";
	ИначеЕсли НРег(ИмяТаблицы) = Перечисления.РежимыАдминистрирования.РабочиеПроцессы Тогда
		Результат = "process";
	ИначеЕсли НРег(ИмяТаблицы) = Перечисления.РежимыАдминистрирования.ИнформационныеБазы Тогда
		Результат = "infobase";
	ИначеЕсли НРег(ИмяТаблицы) = Перечисления.РежимыАдминистрирования.Сеансы Тогда
		Результат = "session";
	ИначеЕсли НРег(ИмяТаблицы) = Перечисления.РежимыАдминистрирования.Соединения Тогда
		Результат = "connection";
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПервичныйКлюч()

Функция Разделение(ИмяТаблицы)
	
	Возврат "toYYYYMM(recordDate)";

КонецФункции // Разделение()

Функция УпорядочитьПо(ИмяТаблицы)

	Возврат СтрШаблон("%1,toYYYYMM(recordDate),recordTimemark", ИмяТаблицы);

КонецФункции // УпорядочитьПо()

// Функция - преобразует переданные записи в строку для отправки в Clickhouse
// 
// Параметры:
//     Записи     - Массив(Структура)      - записи для отправки в Clickhouse
//
// Возвращаемое значение:
//   Строка - строка данных для отправки в Clickhouse
//
Функция ПолучитьСтрокиДляОтправки(Записи, ОписаниеПолей)
	
	МассивСтрокДляОтправки = Новый Массив();
	
	Для Каждого ТекЗапись Из Записи.data Цикл
		
		ДанныеСтрокиДляОтправки = Новый Массив();
		Значение = Записи.endDate;
		Если Значение = Дата(1, 1, 1, 0, 0, 0) Тогда
			Значение = Дата(1970, 1, 1, 0, 0, 0);
		КонецЕсли;
		ДанныеСтрокиДляОтправки.Добавить(СтрШаблон("'%1'", Формат(Значение, "ДФ='гггг-ММ-дд ЧЧ:мм:сс'")));
		ДанныеСтрокиДляОтправки.Добавить(Записи.endTimemark);

		Для Каждого ТекПоле Из ОписаниеПолей Цикл
			Значение = ТекЗапись[ТекПоле.Имя];
			Если ТекПоле.Тип1С = "СТРОКА" Тогда
				Значение = СтрЗаменить(Значение, "'", "''");
				Значение = СтрШаблон("'%1'", Значение);
			ИначеЕсли ТекПоле.Тип1С = "ЧИСЛО" Тогда
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					Значение = 0;
				Иначе
					Попытка
						Значение = Число(Значение);
					Исключение
						Значение = 0;
					КонецПопытки;
				КонецЕсли;
				Значение = Формат(Значение, "ЧДЦ=0; ЧРГ=; ЧГ=");
			ИначеЕсли ТекПоле.Тип1С = "ДАТА" Тогда
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					Значение = Дата(1970, 1, 1, 0, 0, 0);
				КонецЕсли;
				Значение = СтрШаблон("'%1'", Формат(Значение, "ДФ='гггг-ММ-дд ЧЧ:мм:сс'"));
			ИначеЕсли ТипЗнч(Значение) = Тип("Массив") Тогда
				Значение = СтрШаблон("'%1'", СтрСоединить(Значение, Символы.ПС));
			КонецЕсли;
			ДанныеСтрокиДляОтправки.Добавить(Значение);
		КонецЦикла;

		МассивСтрокДляОтправки.Добавить(СтрШаблон("(%1)", СтрСоединить(ДанныеСтрокиДляОтправки, ",")));
		
	КонецЦикла;
	
	СтрокаДляОтправки = СтрСоединить(МассивСтрокДляОтправки, ",");
	
	Возврат СтрокаДляОтправки;
	
КонецФункции // ПолучитьСтрокиДляОтправки()

// Функция - Получить соединение
//
// Возвращаемое значение:
//		HTTPСоединение		- Установленное соединение с http-сервисом
//
Функция ПолучитьСоединение()
	
	Если ТипЗнч(Клик_Соединение) = Тип("HTTPСоединение") Тогда
		Возврат Клик_Соединение;
	КонецЕсли;
	
	// Подключаем http-сервис указанный в настройках подключения к базе
	Попытка
		Клик_Соединение = Новый HTTPСоединение(Клик_Сервер, Клик_Порт, Клик_Пользователь, Клик_Пароль, , 20);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СтрШаблон("Ошибка установки соединения с сервером clickhouse (%1:%2): %3",
		                            Клик_Сервер,
		                            Клик_Порт,
		                            ТекстОшибки);
	КонецПопытки;
	
	Возврат Клик_Соединение;
	
КонецФункции // ПолучитьСоединение()

// Функция - отправляет запрос на обработку в Clickhouse
// 
// Параметры:
//     Соединение                    - HTTPСоединение      - соединение с сервером Clickhouse
//     СтрокаЗапроса                 - Строка              - адрес API на сервере Clickhouse
//     ПараметрыЗапросаДляОтправки   - Строка              - данные для отправки в Clickhouse
//     ДанныеОтвета                  - Массив, Структура   - ответ от сервера Clickhouse
//     ТекстОшибки                   - Строка              - текст ошибки отправки запроса
//
// Возвращаемое значение:
//   Булево                         - Истина - данные успешно обработаны;
//                                    Ложь - в противном случае 
//
Функция ПолучитьРезультатОбработкиХТТПСервиса(Соединение
	                                        , СтрокаЗапроса = ""
	                                        , ПараметрыЗапросаДляОтправки = ""
	                                        , ДанныеОтвета = Неопределено
	                                        , ТекстОшибки = "") Экспорт
	
	ЗапросКСервису = Новый HTTPЗапрос(СтрокаЗапроса);
	ЗапросКСервису.УстановитьТелоИзСтроки(ПараметрыЗапросаДляОтправки);
		
	ТекстОтвета = "";
		
	Попытка
		ОтветСервиса = Соединение.ОтправитьДляОбработки(ЗапросКСервису);
		ТекстОтвета = ОтветСервиса.ПолучитьТелоКакСтроку();
		ДанныеОтвета = ОтветСервиса.Заголовки.Получить("X-ClickHouse-Summary");
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
		
	Если НЕ Лев(ОтветСервиса.КодСостояния, 1) = "2" Тогда
		ТекстОшибки = СокрЛП(ОтветСервиса.КодСостояния) + ": <" + ТекстОтвета + ">";
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПолучитьРезультатОбработкиХТТПСервиса()

// Процедура - обработчик события "ПриСозданииОбъекта"
//
// BSLLS:UnusedLocalMethod-off
Процедура ПриСозданииОбъекта()

	Лог = ПараметрыПриложения.Лог();

КонецПроцедуры // ПриСозданииОбъекта()
// BSLLS:UnusedLocalMethod-on
