// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/iracli/
// ----------------------------------------------------------

Перем ТипОбъектовКластера;  // Перечисление.РежимыАдминистрирования - тип обрабатываемых объектов кластера

Перем Лог;                  // Объект                               - объект записи лога приложения

#Область СлужебныйПрограммныйИнтерфейс

// Функция - возвращает объект управления логированием
//
// Возвращаемое значение:
//  Объект      - объект управления логированием
//
Функция Лог() Экспорт
	
	Возврат Лог;

КонецФункции // Лог()

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт
	
	Если ТипОбъектовКластера = Перечисления.РежимыАдминистрирования.Кластеры Тогда
		ИмяОбъектов = "кластеров";
	ИначеЕсли ТипОбъектовКластера = Перечисления.РежимыАдминистрирования.Серверы Тогда
		ИмяОбъектов = "серверов";
	ИначеЕсли ТипОбъектовКластера = Перечисления.РежимыАдминистрирования.РабочиеПроцессы Тогда
		ИмяОбъектов = "рабочих процессов";
	ИначеЕсли ТипОбъектовКластера = Перечисления.РежимыАдминистрирования.ИнформационныеБазы Тогда
		ИмяОбъектов = "информационных баз";
	ИначеЕсли ТипОбъектовКластера = Перечисления.РежимыАдминистрирования.Сеансы Тогда
		ИмяОбъектов = "сеансов";
	ИначеЕсли ТипОбъектовКластера = Перечисления.РежимыАдминистрирования.Соединения Тогда
		ИмяОбъектов = "соединений";
	КонецЕсли;

	Команда.Опция("cs counter-settings", "", "путь к файлу настроек счетчиков")
	       .ТСтрока()
	       .ВОкружении("IRAC_COUNTER_SETTINGS");

	Команда.Опция("c counter", "", "имя счетчика")
	       .ТСтрока()
	       .ВОкружении(СтрШаблон("IRAC_%1_COUNTER", ВРег(ТипОбъектовКластера)));

	Команда.Опция("d dim", "_all", "имена полей по которым выполняется свертка значений счетчика")
	       .ТСтрока()
	       .ВОкружении(СтрШаблон("IRAC_%1_COUNTER_DIM", ВРег(ТипОбъектовКластера)));

	Команда.Опция("fl filter", "", СтрШаблон("фильтр %1 по значениям полей (пример: eq_name=имя)", ИмяОбъектов))
	       .ТСтрока()
	       .ВОкружении(СтрШаблон("IRAC_%1_COUNTER_FILTER", ВРег(ТипОбъектовКластера)));

	Команда.Опция("s sort", "", СтрШаблон("сортировка %1 по значениям полей,
	                                      |имена полей разделяются запятыми", ИмяОбъектов))
	       .ТСтрока()
	       .ВОкружении(СтрШаблон("IRAC_%1_COUNTER_SORT", ВРег(ТипОбъектовКластера)));

	Команда.Опция("t top", 0, "отбор указанного количество первых наибольших значений счетчика")
	       .ТЧисло()
	       .ВОкружении(СтрШаблон("IRAC_%1_COUNTER_TOP", ВРег(ТипОбъектовКластера)));
	
	Команда.Опция("a aggregate", "count", "агрегатная функция свертки значений счетчика")
	       .ТСтрока()
	       .ВОкружении(СтрШаблон("IRAC_%1_COUNTER_AGGREGATE", ВРег(ТипОбъектовКластера)));
	
	Команда.Опция("f format", "json", "формат вывода результатов (json|prometheus|plain)")
	       .ТСтрока()
	       .ВОкружении(СтрШаблон("IRAC_%1_COUNTER_FORMAT", ВРег(ТипОбъектовКластера)));
	
КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	ВыводОтладочнойИнформации = Команда.ЗначениеОпции("verbose");

	ПараметрыПриложения.УстановитьРежимОтладки(ВыводОтладочнойИнформации);

	ПараметрыЗамера = ЗамерыВремени.НачатьЗамер(Команда, Команда, ТипОбъектовКластера, "counter");

	ПутьКНастройкам   = Команда.ЗначениеОпции("counter-settings");

	ФайлНастроек = Новый Файл(ПутьКНастройкам);
	Если ФайлНастроек.Существует() Тогда
		ПолучениеСчетчиков.УстановитьПараметрыСчетчиков(ПутьКНастройкам);
	КонецЕсли;

	Счетчик           = Команда.ЗначениеОпции("counter");
	Измерения         = Команда.ЗначениеОпции("dim");
	ФильтрСтрокой     = Команда.ЗначениеОпции("filter");
	Сортировка        = Команда.ЗначениеОпции("sort");
	АгрегатнаяФункция = Команда.ЗначениеОпции("aggregate");
	ПервыеКоличество  = Команда.ЗначениеОпции("top");
	ПервыеИмяПоля     = "_value";
	Формат            = Команда.ЗначениеОпции("format");

	Фильтр = ОбщегоНазначения.ФильтрИзПараметровЗапроса(ФильтрСтрокой);

	ПараметрыСчетчиков = ПолучениеСчетчиков.ПараметрыСчетчиков();
	ПараметрыСчетчиковТипаОбъектов = ПараметрыСчетчиков[ТипОбъектовКластера];

	Поля = "";

	Для Каждого ТекИзмерение Из ПараметрыСчетчиковТипаОбъектов["dimentions"] Цикл
		Если ТекИзмерение.Значение["name_rac"] = Неопределено Тогда
			ИмяПоля = ТекИзмерение.Ключ;
		Иначе
			ИмяПоля = ТекИзмерение.Значение["name_rac"];
		КонецЕсли;
		Поля = Поля + ?(ЗначениеЗаполнено(Поля), ", ", "") + ИмяПоля;
	КонецЦикла;

	Для Каждого ТекСчетчик Из ПараметрыСчетчиковТипаОбъектов["counters"] Цикл
		Если ТекСчетчик.Значение["name_rac"] = Неопределено Тогда
			ИмяПоля = ТекСчетчик.Ключ;
		Иначе
			ИмяПоля = ТекСчетчик.Значение["name_rac"];
		КонецЕсли;
		Если ЗначениеЗаполнено(Счетчик) И НЕ ВРег(Счетчик) = ВРег(ИмяПоля) Тогда
			Продолжить;
		КонецЕсли;
		Поля = Поля + ?(ЗначениеЗаполнено(Поля), ", ", "") + ИмяПоля;
	КонецЦикла;

	Поля = ?(ЗначениеЗаполнено(Поля), Поля, "_all");

	ЗамерыВремени.ЗафиксироватьПодготовкуПараметров(ПараметрыЗамера);

	ОбъектыКластера = ПодключенияКАгентам.ОбъектыКластера(ТипОбъектовКластера, Истина, Поля, Фильтр);

	Результат = ПолучениеСчетчиков.Счетчики(ОбъектыКластера,
	                                        ТипОбъектовКластера,
	                                        Счетчик,
	                                        ПервыеКоличество,
	                                        Измерения,
	                                        АгрегатнаяФункция,
	                                        Формат);

	ЗамерыВремени.ЗафиксироватьОкончаниеЗамера(ПараметрыЗамера);

	Сообщить(Результат);

КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытий

// Процедура - обработчик события "ПриСозданииОбъекта"
//
// Параметры:
//  ТипОбъектов   - Перечисление.РежимыАдминистрирования    - тип обрабатываемых объектов кластера
// 
// BSLLS:UnusedLocalMethod-off
Процедура ПриСозданииОбъекта(Знач ТипОбъектов)

	ТипОбъектовКластера = ТипОбъектов;

	Лог = ПараметрыПриложения.Лог();

КонецПроцедуры // ПриСозданииОбъекта()
// BSLLS:UnusedLocalMethod-on

#КонецОбласти // ОбработчикиСобытий
