// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/iracli/
// ----------------------------------------------------------

Перем Лог;                        // - Объект         - объект записи лога приложения

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Опция("c count", -1, "количество сохраняемых дампов")
	       .ТЧисло()
	       .ВОкружении("IRAC_DUMP_COUNT");
	
	Команда.Опция("t time", 60, "переодичность дампа в секундах")
	       .ТЧисло()
	       .ВОкружении("IRAC_DUMP_TIME");
	
	Команда.Опция("s summary", false, "для информационных баз и соединений получать только основные данные")
	       .ТБулево()
	       .ВОкружении("IRAC_DUMP_SUMMARY");
	
	Команда.Аргумент("ADDRESS", ".", "адрес для сохранения дампа объектов кластера 1С (file://<путь к каталогу>, clickhouse://<адрес сервера>/<имя базы>)")
	       .ТСтрока()
	       .ВОкружении("IRAC_DUMP_ADDRESS");

КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	ВыводОтладочнойИнформации = Команда.ЗначениеОпции("verbose");

	ПараметрыПриложения.УстановитьРежимОтладки(ВыводОтладочнойИнформации);

	АдресСохранения      = Команда.ЗначениеАргумента("ADDRESS");
	Количество           = Команда.ЗначениеОпции("count");
	Периодичность        = Команда.ЗначениеОпции("time");
	ТолькоОсновныеДанные = Команда.ЗначениеОпции("summary");

	КоличествоДампов = 0;

	ОбрабатываемыеОбъекты = ОбщегоНазначения.ОбрабатываемыеОбъектыКластера();

	СчетчикЗапусков = 1;

	Пока Истина Цикл
		
		Если СчетчикЗапусков > 1 Тогда
			Приостановить(Периодичность * 1000);
		КонецЕсли;

		Дамп = Новый Соответствие();
		Дамп.Вставить("startDate"    , ТекущаяУниверсальнаяДата());
		Дамп.Вставить("startTimemark", ТекущаяУниверсальнаяДатаВМиллисекундах());
	
		Для Каждого ТекОбъект Из ОбрабатываемыеОбъекты Цикл
			ПараметрыЗамера = ЗамерыВремени.НачатьЗамер(СтартовыйСценарий().Источник,
			                                            СтрСоединить(Новый Массив(АргументыКоманднойСтроки), " "),
			                                            ТекОбъект,
			                                            "list");

			Дамп.Вставить(ТекОбъект, Новый Структура());

			Дамп[ТекОбъект].Вставить("startDate"    , ТекущаяУниверсальнаяДата());
			Дамп[ТекОбъект].Вставить("startTimemark", ТекущаяУниверсальнаяДатаВМиллисекундах());

			Поля = "_all";
			Если ТолькоОсновныеДанные
			   И (ТекОбъект = Перечисления.РежимыАдминистрирования.ИнформационныеБазы
			   ИЛИ ТекОбъект = Перечисления.РежимыАдминистрирования.Соединения) Тогда
				Поля = "_summary";
			КонецЕсли;

			ОбъектыКластера = ПодключенияКАгентам.ОбъектыКластера(ТекОбъект, Истина, Поля, Неопределено);
			
			Дамп[ТекОбъект].Вставить("data", ОбъектыКластера);

			Дамп[ТекОбъект].Вставить("endDate"    , ТекущаяУниверсальнаяДата());
			Дамп[ТекОбъект].Вставить("endTimemark", ТекущаяУниверсальнаяДатаВМиллисекундах());
			Дамп[ТекОбъект].Вставить("duration"   , Дамп[ТекОбъект]["endTimemark"] - Дамп[ТекОбъект]["startTimemark"]);

			ЗамерыВремени.ЗафиксироватьОкончаниеЗамера(ПараметрыЗамера);
		КонецЦикла;

		Дамп.Вставить("endDate"    , ТекущаяУниверсальнаяДата());
		Дамп.Вставить("endTimemark", ТекущаяУниверсальнаяДатаВМиллисекундах());
		Дамп.Вставить("duration"   , Дамп["endTimemark"] - Дамп["startTimemark"]);

		ПараметрыСохранения = ПараметрыАдреса(АдресСохранения);

		ПараметрыСохранения.ОбработчикСохранения.Записать(Дамп, ПараметрыСохранения.Адрес);

		Если СчетчикЗапусков >= Количество И Количество > -1 Тогда
			Прервать;
		КонецЕсли;

		СчетчикЗапусков = СчетчикЗапусков + 1;

	КонецЦикла;

КонецПроцедуры // ВыполнитьКоманду()

Функция ПараметрыАдреса(Знач Адрес)

	ПараметрыАдреса = Новый Структура("СпособСохранения, Адрес, ОбработчикСохранения");
	ПозицияРазделителя = СтрНайти(Адрес, "://");
	
	Если ПозицияРазделителя = 0 Тогда
		ПараметрыАдреса.СпособСохранения     = ОбщегоНазначения.СпособыСохранения().file;
		ПараметрыАдреса.Адрес                = Адрес;
		ПараметрыАдреса.ОбработчикСохранения = ОбщегоНазначения.ОбработчикиСохранения().file;
	Иначе
		СпособСохранения = Лев(Адрес, ПозицияРазделителя - 1);
	КонецЕсли;

	Если НРег(СпособСохранения) = ОбщегоНазначения.СпособыСохранения().file Тогда
		ПараметрыАдреса.СпособСохранения     = ОбщегоНазначения.СпособыСохранения().file;
		ПараметрыАдреса.Адрес                = Сред(Адрес, ПозицияРазделителя + 3);
		ПараметрыАдреса.ОбработчикСохранения = Новый ОбработчикЗаписиВФайл();
	ИначеЕсли НРег(СпособСохранения) = ОбщегоНазначения.СпособыСохранения().clickhouse Тогда
		ПараметрыАдреса.СпособСохранения     = ОбщегоНазначения.СпособыСохранения().clickhouse;
		ПараметрыАдреса.Адрес                = Сред(Адрес, ПозицияРазделителя + 3);
		ПараметрыАдреса.ОбработчикСохранения = Новый ОбработчикЗаписиВClickHouse();
	Иначе
		ВызватьИсключение СтрШаблон("Неизвестный способ сохранения дампа ""%1""", СпособСохранения);
	КонецЕсли;

	Возврат ПараметрыАдреса;

КонецФункции // ПараметрыАдреса()

// Процедура - обработчик события "ПриСозданииОбъекта"
//
// BSLLS:UnusedLocalMethod-off
Процедура ПриСозданииОбъекта()

	Лог = ПараметрыПриложения.Лог();

КонецПроцедуры // ПриСозданииОбъекта()
// BSLLS:UnusedLocalMethod-on
